// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plans {
  FREE
  BASIC
  PREMIUM
}

enum Role {
  USER
  ADMIN
  SUPPORT
}

model User {
  id        String   @id @default(uuid())
  fullname  String?
  clerkId   String   @unique
  type      String
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  stripeId  String? // Nullable in case Stripe isn't used

  billing   Billings?
  campaigns Campaign[]
  domains   Domain[] // One user can have multiple domains
}

model Billings {
  id      String @id @default(cuid())
  plan    Plans
  credits Int
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Campaign {
  id        String   @id @default(cuid())
  name      String
  customers String[]
  userId    String
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  domains Domain[] // A campaign can belong to multiple domains
}

model Domain {
  id         String  @id @default(cuid())
  name       String
  icon       String
  userId     String
  campaignId String?

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaign Campaign? @relation(fields: [campaignId], references: [id], onDelete: SetNull)

  chatBot         ChatBot?
  helpDesks       HelpDesk[]
  filterQuestions FilterQuestions[]
  customers       Customer[]
  products        Product[]
  bookings        Booking[]
}

model ChatBot {
  id             String  @id @default(cuid())
  welcomeMessage String
  icon           String
  background     String
  textColor      String
  helpdesk       Boolean
  domainId       String  @unique

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model HelpDesk {
  id       String @id @default(cuid())
  question String
  answer   String
  domainId String

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model FilterQuestions {
  id       String @id @default(cuid())
  question String
  answered String
  domainId String

  domain    Domain             @relation(fields: [domainId], references: [id], onDelete: Cascade)
  responses CustomerResponse[]
}

model Customer {
  id       String @id @default(cuid())
  email    String @unique
  domainId String

  domain    Domain             @relation(fields: [domainId], references: [id], onDelete: Cascade)
  responses CustomerResponse[]
  chatRooms ChatRoom[]
  bookings  Booking[]
}

model CustomerResponse {
  id               String @id @default(cuid())
  question         String
  answered         String
  customerId       String
  filterQuestionId String

  customer       Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  filterQuestion FilterQuestions @relation(fields: [filterQuestionId], references: [id], onDelete: Cascade)
}

model Product {
  id        String   @id @default(cuid())
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  domainId  String

  domain Domain @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id         String   @id @default(cuid())
  live       Boolean
  mailed     Boolean
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customerId String

  customer Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  messages ChatMessage[]
  bookings Booking[]
}

model ChatMessage {
  id         String   @id @default(cuid())
  message    String
  role       Role
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String
  seen       Boolean  @default(false)

  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
}

model Booking {
  id         String   @id @default(cuid())
  date       DateTime
  slot       String
  email      String
  customerId String
  domainId   String
  createdAt  DateTime @default(now())

  customer Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade, map: "Booking_Customer_fkey")
  domain   Domain    @relation(fields: [domainId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  chatRoomId String?
}
